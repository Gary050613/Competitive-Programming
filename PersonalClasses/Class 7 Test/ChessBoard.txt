#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
int s[9][9];//每个格子的分数
int sum[9][9];//(1,1)到(i,j)的矩形的分数之和
int res[15][9][9][9][9];//fun记录表
int calsum(int x1,int y1,int x2,int y2)//(x2,y2)到(x1,y1)的矩形分数之和 
{
	return sum[x2][y2]-sum[x2][y1-1]-sum[x1-1][y2]+sum[x1-1][y1-1];
} 
int fun(int n,int x1,int y1,int x2,int y2)//以(x1,y1)为左上角，(x2,y2)为右上角的棋盘分割成n份后的最小平方和 
{
	int t,a,b,c,e,MIN=10000000;
	if(res[n][x1][y1][x2][y2]!=-1) 
		return res[n][x1][y1][x2][y2];//返回已经计算过的fun[n][x1][y1][x2][y2]
	if(n==1) //分割成一份 
	{
		t=calsum(x1,y1,x2,y2);
		res[n][x1][y1][x2][y2]=t*t;
		return t*t;
	} 
	for(a=x1;a<x2;a++)//沿x方向切割 
	{
		c=calsum(a+1,y1,x2,y2);
		e=calsum(x1,y1,a,y2);
		t=min(fun(n-1,x1,y1,a,y2)+c*c,fun(n-1,a+1,y1,x2,y2)+e*e);//两种保留方式 ，保留左、右 
		if(MIN>t) MIN=t;
	} 
	for(b=y1;b<y2;b++)//沿y方向分割 
	{
		c=calsum(x1,b+1,x2,y2);
		e=calsum(x1,y1,x2,b);
		t=min(fun(n-1,x1,y1,x2,b)+c*c,fun(n-1,x1,b+1,x2,y2)+e*e);//保留上，下 
		if(MIN>t) MIN=t;
	} 
	res[n][x1][y1][x2][y2]=MIN;//存储计算结果 
	return MIN;
} 
int main()
{
	memset(sum,0,sizeof(sum));
	memset(res,-1,sizeof(res));
	int n;
	cin>>n;
	for(int i=1;i<9;i++)
	{
		for(int j=1,rowsum=0;j<9;j++)
		{
			cin>>s[i][j];
			rowsum+=s[i][j];//行之和 
			sum[i][j]=sum[i-1][j]+rowsum;//总和 
		}
	}
	double result=n*fun(n,1,1,8,8)-sum[8][8]*sum[8][8];
	printf("%.3lf\n",sqrt(result/(n*n)));
	return 0;
}